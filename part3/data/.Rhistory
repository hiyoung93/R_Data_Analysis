group_by(class)%>%
summarise(클래스의 평균 = mean(class,na.rm = TRUE))
#2. class에 따른 평균속도 -#sort 내림차순으로 다섯개만(head())
mpg %>%
mutate(평균속도 = (cty+hwy)/2)%>%
group_by(class)%>%
summarise(클래스의 평균 = mean(평균속도도,na.rm = TRUE))
#2. class에 따른 평균속도 -#sort 내림차순으로 다섯개만(head())
mpg %>%
mutate(평균속도 = (cty+hwy)/2)%>%
group_by(class)%>%
summarise(클래스의 평균 = mean(평균속도,na.rm = TRUE))
#2. class에 따른 평균속도 -#sort 내림차순으로 다섯개만(head())
mpg %>%
mutate(평균속도 = (cty+hwy)/2)%>%
group_by(class)%>%
summarise(클래스의 평균 = mean(평균속도,na.rm = TRUE))%>%
arrange(desc(클래스의 평균))
mpg
#2. class에 따른 평균속도 -#sort 내림차순으로 다섯개만(head())
mpg %>%
mutate(avg_spd = (cty+hwy)/2)%>%
group_by(class)%>%
summarise(클래스의 평균 = mean(avg_spd))%>%
arrange(desc(클래스의 평균))
#2. class에 따른 평균속도 -#sort 내림차순으로 다섯개만(head())
mpg %>%
mutate(avg_spd = (cty+hwy)/2)%>%
group_by(class)%>%
summarise(클래스의평균 = mean(avg_spd))%>%
arrange(desc(클래스의평균))
#2. class에 따른 평균속도 -#sort 내림차순으로 다섯개만(head())
mpg %>%
mutate(avg_spd = (cty+hwy)/2)%>%
group_by(class)%>%
summarise(클래스의평균 = mean(avg_spd))%>%
arrange(desc(클래스의평균))%>%
head()
#2. class에 따른 평균속도 -#sort 내림차순으로 다섯개만(head())
mpg %>%
mutate(avg_spd = (cty+hwy)/2)%>%
group_by(class)%>%
summarise(클래스의평균 = mean(avg_spd))%>%
arrange(desc(클래스의평균))%>%
head(5)
mtcars
mtcars%>%
mutate(md = (mpg / disp))%>%
arrange(desc(md)) %>%
head(5)
mtcars%>%
mutate(mut = (cyl/hp))%>%
tilter(mean(cyl))%>%
mtcars%>%
mutate(mut = (cyl/hp))%>%
tilter(mean(cyl))%>%
head(5)
mtcars%>%
mutate(mut = (cyl/hp))%>%
tilter(mtcars,mean(cyl))%>%
head(5)
mtcars%>%
mutate(mut = (cyl/hp))%>%
arrange(desc(mut))%>%
head(5)
mutate(mut = (mean= c(cyl,hp))%>%
mtcars%>%
mutate(mut = (mean= c(cyl,hp)))%>%
arrange(desc(mut))%>%
head(5)
mtcars%>%
summarise(funs(mean),hp)
mtcars%>%
group_by(cyl)%>%
summarise(funs(mean),hp)
mtcars%>%
group_by(cyl)%>%
summarise(funs(mean),hp)%>%
head(5)
mtcars%>%
group_by(cyl)%>%
summarise(funs(mean),hp)%>%
head(5)
mtcars%>%
group_by(cyl)%>%
summarise(funs(mean))%>%
head(5)
mtcars%>%
group_by(cyl)%>%
summarise_each(mean)%>%
head(5)
mtcars%>%
group_by(cyl)%>%
summarise_each(mean)%>%
head(7)
mtcars%>%
group_by(cyl)%>%
summarise(avg_hp = mean(hp))%>%
arrange(desc(avg_hp))
head(5)
mtcars%>%
group_by(cyl)%>%
summarise(avg_hp = mean(hp))%>%
arrange(desc(avg_hp))
mtcars%>%
group_by(cyl)%>%
summarise(avg_hp = mean(hp))%>%
arrange(desc(avg_hp))
mtcars%>%
group_by(cyl)%>%
summarise(avg_hp = funs(mean(hp)))%>%
arrange(desc(avg_hp))
mtcars%>%
group_by(cyl)%>%
summarise(avg_hp = funs(mean(hp)))%>%
arrange(desc(avg_hp))
mtcars%>%
group_by(cyl)%>%
summarise_each(avg_hp = funs(mean(hp)))%>%
arrange(desc(avg_hp))
mtcars
mtcars%>%
group_by(cyl)%>%
summarise_each(funs(mean),hp,disp)%>%
arrange(desc(avg_hp))%
mtcars%>%
group_by(cyl)%>%
summarise_each(funs(mean),hp,disp)%>%
mtcars%>%
group_by(cyl)%>%
summarise_each(funs(mean),hp,disp)%>%
mtcars%>%
group_by(cyl)%>%
summarise_each(funs(mean),hp,disp)
mtcars%>%
group_by(cyl)%>%
summarise_each(funs(mean),hp,disp)
mtcars%>%
group_by(cyl)%>%
summarise_each(funs(mean),hp,disp)%>%
mtcars%>%
group_by(cyl)%>%
summarise_each(funs(mean,n()),hp,disp)
mtcars%>%
group_by(cyl)%>%
summarise_each(funs(mean,n()),hp,disp)
mtcars%>%
group_by(cyl)%>%
summarise_each(funs(mean),hp,disp)%>%
mtcars%>%
group_by(cyl)%>%
summarise_each(funs(mean),hp,disp)
mtcars%>%
group_by(cyl)%>%
summarise_each(funs(mean),hp,disp)
mtcars%>%
group_by(cyl)%>%
summarise_each(list(mean),hp,disp)
mtcars%>%
group_by(cyl)%>%
summarise_each(funs(mean,n()),hp,disp)
iris
iris.image
iris%>%
filter(Species)
iris%>%
filter(Species)
iris%>%
filter(iris,Species)
#품종별 4가지 평균
iris%>%
filter(iris,Species)
#품종별 4가지 평균
iris%>%
select(iris,Species)
#품종별 4가지 평균
iris%>%
group_by(Species)%>%
iris%>%
group_by(Species)%>%
#품종별 4가지 평균
iris%>%
group_by(Species)%>%
summarise(평균 = mean)
iris%>%
group_by(Species)%>%
summarise(평균 = mean)
#품종별 4가지 평균
iris%>%
group_by(Species)%>%
summarise(mean)
iris%>%
group_by(Species)%>%
summarise(mean())
#품종별 4가지 평균
iris%>%
group_by(Species)%>%
mean(iris)
iris%>%
group_by(Species)%>%
mean(iris)
#품종별 4가지 평균
iris%>%
group_by(Species)
#품종별 4가지 평균
iris%>%
group_by(Species)%>%
summarise_each(funs(mean))
iris%>%
group_by(Species)%>%
summarise_each(list(mean),Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)
library(googleVis)
library(dplyr) #끌어 내려오면 값을 간단하게 만드는 함수
attach(Fruits)
Fruits
f1<- filter(Fruits,Expenses>80) ;f1
Fruits2 %>%
filter(Expenses>90) %>%
arrange(Sales)#2번
Fruits %>%
filter(Expenses>90) %>%
arrange(Sales)#2번
F3 <-  filter(Fruits,Expenses > 90); F3#3?
F3 <-  filter(Fruits,Expenses > 90); F3#3?
F4 <- filter(Fruits,Expenses%in%c('79','91'));F4#4번
F3 <-  filter(Fruits,Expenses > 90 & Sales >80); F3#3번
F3 <-  filter(Fruits,Expenses > 90 & Sales >80); F3#3번
F3 <-  filter(Fruits,Expenses > 90)%>%
arrange(Sales) F3#3번
F3 <-  filter(Fruits,Expenses > 90)%>%
arrange(Sales) F3#3번
F3 <-  filter(Fruits,Expenses > 90)%>%
arrange(Sales); F3#3번
F3 <-  filter(Fruits,Expenses > 90)%>%
arrange(Sales); F3#3번
F3 %>%
filter(Fruits,Expenses > 90)%>%
arrange(Sales); F3#3번
F3 %>%
filter(Fruits,Expenses > 90)%>%
arrange(Sales); F3#3번
F3 %>%
filter(Expenses > 90)%>%
arrange(Sales); F3#3번
F3 %>%
filter(Expenses > 90)%>%
arrange(Sales); F3#3번
F3 %>%
filter(Expenses > 90)%>%
arrange(Sales)#3번
#sqldf()패키지활용
install.packages("sqldf")
library(sqldf)
library(googleVis)
fruits
library(googleVis)
library(sqldf)
fruits
Fruits
sqldf('SELECT * FROM Fruits')
#싱글코트로 감싸야함
sqldf('SELECT * FROM Fruits
WHERE Fruit = \'Apples\' ')
#싱글코트로 감싸야함
sqldf('SELECT * FROM Fruits
WHERE Fruit = \'Apples\' ')
sqldf('SELECT * FROM Fruits limit 3')
sqldf('SELECT * FROM Fruits limit 3, 5')
#세번째 부터 다섯개를 보여줘
sqldf('SELECT * FROM Fruits
ORDER BY Year')
#세번째 부터 다섯개를 보여줘
sqldf('SELECT * FROM Fruits')
sqldf('SELECT * FROM Fruits
ORDER BY Year Desc')
spldf('SELECT SUM(Sales)FROM Fruits')
sqldf('SELECT SUM(Sales)FROM Fruits')
sqldf('SELECT SUM(Sales)FROM Fruits group by Fruit')
sqldf('SELECT SUM(Sales)FROM Fruits group by Fruits')
sqldf('SELECT Fruit SUM(Sales)FROM Fruits group by Fruit')
sqldf('SELECT Fruit, SUM(Sales)FROM Fruits group by Fruit')
sqldf('select Year, avg(Years),avg(Expenses),avg(Profit)FROM Fruits group by Fruit')
sqldf('select Year, avg(Years),avg(Expenses),avg(Profit)
FROM Fruits group by Year')
sqldf('select Year, avg(sales),avg(Expenses),avg(Profit)
FROM Fruits group by Year')
#d이익의 내림차순
sqldf('select Year, avg(sales),avg(Expenses),avg(Profit)
FROM Fruits group by Year
ORDER BY Expanses')
#d이익의 내림차순
sqldf('select Year, avg(sales),avg(Expenses),avg(Profit)
FROM Fruits group by Year
ORDER BY Expenses')
#d이익의 내림차순
sqldf('select Year, avg(sales),avg(Expenses),avg(Profit)
FROM Fruits group by Year
ORDER BY Expenses Desc')
#
sqldf('select Fruit, sum(sales),sum(Expenses),sum(Profit)
FROM Fruits group by Fruit')
#d이익의 내림차순
sqldf('select Year, avg(sales),avg(Expenses),avg(Profit)
FROM Fruits group by Year
ORDER BY Profit Desc')
#이익(profit)의 내림차순
sqldf('select Year, avg(sales),avg(Expenses),avg(Profit)
FROM Fruits group by Year
ORDER BY avg(Profit) Desc')
#sale의최대최소값을 구하자
sqldf('select max(Salse) from Fruits')
sqldf('select min(Sales) from Fruits')
#sale의최대최소값을 구하자
sqldf('select max(Sales) from Fruits')
#sale의최대최소값을 구하자
sqldf('select max(Sales),min(Sales) from Fruits')
sqldf('select min(Fruit) from Fruits')
Fruits
sqldf('select min(Fruit),max(Fruit) from Fruits')
#과일별 가격의 평균
sqldf('select Fruits, avg(Sales)
from Fruits
group by Fruits')
#과일별 가격의 평균
sqldf('select Fruits, avg(Sales)
from Fruits
group by Fruit')
#과일별 가격의 평균
sqldf('select Fruit, avg(Sales)
from Fruits
group by Fruit')
sqldf('select * from Fruits
where sales > (select Sales
from Fruits
where expenses = 78')
sqldf('select * from Fruits
where Sales > (select Sales
from Fruits
where expenses = 78')
sqldf('select * from Fruits
where Sales > (select Sales
from Fruits
where expenses = 78)')
sqldf('select * from Fruits
where Sales')
sqldf('select Sales
from Fruits
where expenses = 78')
sqldf('select * from Fruits
where Sales > (select Sales
from Fruits
where expenses = 78)')
#####
#위에있는거 풀어 넣어서 해보기
sqldf('select * from Fruits
where Sales')
sqldf('select Sales
from Fruits
where expenses = 78')
song <-  read.csv('song.csv')
song <-  read.csv('song.csv')
song
song <-  read.csv('song.csv')
song
song <-  read.csv('song.csv')
song
song <-  read.csv("song.csv")
song
library(readr)
dataset <- read_csv(NULL)
View(dataset)
library(readr)
dataset <- read_csv(NULL)
View(dataset)
song <-  read.csv("song.csv")
song <-  read.csv("song.csv", header = F, fileEncoding = 'utf8')
song
song <-  read.csv("song.csv", header = F, fileEncoding = 'utf8')
song <-  read.csv("song.csv", header = F, fileEncoding = 'utf8')
song
library(readr)
#sqldf()패키지활용
install.packages("sqldf")
library(sqldf)
library(googleVis)
Fruits
#SQL이랑 비슷
#싱글코트로 감싸야함
sqldf('SELECT * FROM Fruits')
#세번째 부터 다섯개를 보여줘
sqldf('SELECT * FROM Fruits
WHERE Fruit = \'Apples\' ')
sqldf('SELECT * FROM Fruits limit 3, 5')
#ODER BY 안에는 기본적으로 오름차순(아래로 내려갈수록 커짐)이다
sqldf('SELECT * FROM Fruits
+       ORDER BY Year')
sqldf('SELECT * FROM Fruits')#이거 안 Year는 순서가 약간 다르다.
sqldf('SELECT * FROM Fruits
ORDER BY Year Desc')# Desc이거는 내림차순
#합계판매량 구하기
sqldf('SELECT SUM(Sales)FROM Fruits')
# 과일별로 묶어서 그 값의 sale의 합계 값만 넣어줘
sqldf('SELECT Fruit, SUM(Sales)FROM Fruits group by Fruit')
#과일의 세일 가격 profit의 합계가격
sqldf('select Fruit, sum(sales),sum(Expenses),sum(Profit)
FROM Fruits group by Fruit')
#!연도별 평균 매출 평균
sqldf('select Year, avg(sales),avg(Expenses),avg(Profit)
FROM Fruits group by Year')
#avg(profit)이익의 내림차순
sqldf('select Year, avg(sales),avg(Expenses),avg(Profit)
FROM Fruits group by Year
ORDER BY avg(Profit) Desc')#!의 가격을 구하려고 했으니까 avg(Profit)으로 넣어야한다.)
#sale의최대최소값을 구하자 듀개를 같이 쓸수 있따.
sqldf('select max(Sales),min(Sales) from Fruits')
##이건 문말이지??
sqldf('select min(Fruit),max(Fruit) from Fruits')
Fruits
#과일별 가격의 평균
sqldf('select Fruit, avg(Sales)
from Fruits
group by Fruit')
#서브쿼리
sqldf('select * from Fruits
where Sales > (select Sales
from Fruits
where expenses = 78)')
#####
#위에있는거 풀어 넣어서 해보기
sqldf('select * from Fruits
where Sales')
sqldf('select Sales
from Fruits
where expenses = 78')
#값이 완전 다름
song <-  read.csv("song.csv", header = F, fileEncoding = 'utf8')
song
library(readr)
dataset <- read_csv(NULL)
View(dataset)
install.packages("sqldf")
song <-  read.csv("song.csv", header = F, fileEncoding = 'utf8')
setwd(D:\workspace\R_Data_Analysis\part3\190527 R\)
setwd(D:\workspace\R_Data_Analysis\part3\190527 R/)
setwd(D:/workspace/R_Data_Analysis/part3/190527 R/)
getwd()
#sqldf()패키지활용
install.packages("sqldf")
library(sqldf)
library(googleVis)
Fruits
#SQL이랑 비슷
#싱글코트로 감싸야함
sqldf('SELECT * FROM Fruits')
#세번째 부터 다섯개를 보여줘
sqldf('SELECT * FROM Fruits
WHERE Fruit = \'Apples\' ')
sqldf('SELECT * FROM Fruits limit 3, 5')
#ODER BY 안에는 기본적으로 오름차순(아래로 내려갈수록 커짐)이다
sqldf('SELECT * FROM Fruits
+       ORDER BY Year')
sqldf('SELECT * FROM Fruits')#이거 안 Year는 순서가 약간 다르다.
sqldf('SELECT * FROM Fruits
ORDER BY Year Desc')# Desc이거는 내림차순
#합계판매량 구하기
sqldf('SELECT SUM(Sales)FROM Fruits')
# 과일별로 묶어서 그 값의 sale의 합계 값만 넣어줘
sqldf('SELECT Fruit, SUM(Sales)FROM Fruits group by Fruit')
#과일의 세일 가격 profit의 합계가격
sqldf('select Fruit, sum(sales),sum(Expenses),sum(Profit)
FROM Fruits group by Fruit')
#!연도별 평균 매출 평균
sqldf('select Year, avg(sales),avg(Expenses),avg(Profit)
FROM Fruits group by Year')
#avg(profit)이익의 내림차순
sqldf('select Year, avg(sales),avg(Expenses),avg(Profit)
FROM Fruits group by Year
ORDER BY avg(Profit) Desc')#!의 가격을 구하려고 했으니까 avg(Profit)으로 넣어야한다.)
#sale의최대최소값을 구하자 듀개를 같이 쓸수 있따.
sqldf('select max(Sales),min(Sales) from Fruits')
##이건 문말이지??
sqldf('select min(Fruit),max(Fruit) from Fruits')
Fruits
#과일별 가격의 평균
sqldf('select Fruit, avg(Sales)
from Fruits
group by Fruit')
#서브쿼리
sqldf('select * from Fruits
where Sales > (select Sales
from Fruits
where expenses = 78)')
#####
#위에있는거 풀어 넣어서 해보기
sqldf('select * from Fruits
where Sales')
sqldf('select Sales
from Fruits
where expenses = 78')
#값이 완전 다름
getwd()
song <-  read.csv("song.csv", header = F, fileEncoding = 'utf8')
song
library(readr)
dataset <- read_csv(NULL)
View(dataset)
getwd()
song <-  read.csv("song.csv", header = F, fileEncoding = 'utf8')
song
song <-  read.csv("song.csv", header = F, fileEncoding = 'utf8')
getwd()
getwd()
